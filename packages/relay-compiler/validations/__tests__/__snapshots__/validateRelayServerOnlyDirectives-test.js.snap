// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-client-fileds-inside-valid-fragments.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query QueryWithFragmentWithDefer {
  me {
    id
    ...UserFragment @defer(label: "DeferredFragmentLabel")
  }
}

fragment UserFragment on User {
  id
  emailAddresses
  ...DeferredFragment
}

fragment DeferredFragment on ClientUser {
  clientname
}

interface ClientUser {
  id: String
  clientname: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-defer-on-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithDefer {
  me {
    id
    ...UserFragment
  }
}

fragment UserFragment on User {
  id
  emailAddresses
  ...DeferredFragment @defer(label: "DeferredFragmentLabel")
}

fragment DeferredFragment on ClientUser {
  clientname
}

interface ClientUser {
  id: String
  clientname: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @defer. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (12:23)
  11:   emailAddresses
  12:   ...DeferredFragment @defer(label: "DeferredFragmentLabel")
                            ^
  13: }
  
  Source (derived): GraphQL request (12:3)
  11:   emailAddresses
  12:   ...DeferredFragment @defer(label: "DeferredFragmentLabel")
        ^
  13: }
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-defer-on-fragment-with-only-client-fields.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithDefer {
  me {
    id
    ...UserFragment @defer(label: "DeferredFragmentLabel")
  }
}

fragment UserFragment on User {
  clientField
}

extend type User {
  clientField: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @defer. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (5:21)
  4:     id
  5:     ...UserFragment @defer(label: "DeferredFragmentLabel")
                         ^
  6:   }
  
  Source: GraphQL request (10:3)
   9: fragment UserFragment on User {
  10:   clientField
        ^
  11: }
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-stream-child-of-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithStream($id: ID!) {
  node(id: $id) {
    id
    ...FeedbackFragment
  }
}

fragment FeedbackFragment on Feedback {
  id
  foo {
    bar {
      users @stream(initial_count: 1, label: "StreamedActorsLabel") {
        id
        name
      }
    }
  }
}


extend type Feedback {
  foo: Foo
}


type Foo {
  bar: Bar
}

type Bar {
  users: [User]
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @stream. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (13:13)
  12:     bar {
  13:       users @stream(initial_count: 1, label: "StreamedActorsLabel") {
                  ^
  14:         id
  
  Source: GraphQL request (11:3)
  10:   id
  11:   foo {
        ^
  12:     bar {
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: fragment-with-stream-on-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query QueryWithFragmentWithStream($id: ID!) {
  node(id: $id) {
    id
    ...FeedbackFragment
  }
}

fragment FeedbackFragment on Feedback {
  id
  foos @stream(initial_count: 1, label: "StreamedActorsLabel") {
    bar
  }
}


extend type Feedback {
  foos: [Foo]
}

type Foo {
  bar: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @stream. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (11:8)
  10:   id
  11:   foos @stream(initial_count: 1, label: "StreamedActorsLabel") {
             ^
  12:     bar
  
  Source: GraphQL request (11:3)
  10:   id
  11:   foos @stream(initial_count: 1, label: "StreamedActorsLabel") {
        ^
  12:     bar
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: match.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
fragment ActorsRendererFragment on Node {
  id
  actors {
    nameRenderer @match {
      ...PlainUserNameRenderer_name @module(name: "PlainUserNameRenderer.react")
      ...MarkdownUserNameRenderer_name
        @module(name: "MarkdownUserNameRenderer.react")
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  client_text
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  client_text
  data {
    markup
  }
}

query TestQuery {
  node(id: "1") {
    ...ActorsRendererFragment
  }
}

extend type PlainUserNameRenderer {
  client_text: String
}

extend type MarkdownUserNameRenderer {
  client_text: String
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
PASSED
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: module-on-child-of-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment NameRendererFragment on User {
  id
  foo {
    bar {
      user {
        nameRenderer @match {
          ...PlainUserNameRenderer_name
            @module(name: "PlainUserNameRenderer.react")
          ...MarkdownUserNameRenderer_name
            @module(name: "MarkdownUserNameRenderer.react")
        }
      }
    }
  }
}

extend type User {
  foo: Foo
}

type Foo {
  bar: Bar
}

type Bar {
  user: User
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query Test {
  me {
    ...NameRendererFragment
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @module. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source: GraphQL request (9:13)
   8:           ...PlainUserNameRenderer_name
   9:             @module(name: "PlainUserNameRenderer.react")
                  ^
  10:           ...MarkdownUserNameRenderer_name
  
  Source: GraphQL request (4:3)
  3:   id
  4:   foo {
       ^
  5:     bar {
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: module-on-child-of-client-in-fragment.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
extend type User {
  foo: Foo
}

type Foo {
  bar: Bar
}

type Bar {
  user: User
}

fragment SomeUser on User {
  nameRenderer {
    ...PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment NameRendererFragment on User {
  id
  foo {
    bar {
      user {
        ...SomeUser
      }
    }
  }
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query TestQuery {
  ...NameRendererFragment
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @module. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source: GraphQL request (17:7)
  16:     ...PlainUserNameRenderer_name
  17:       @module(name: "PlainUserNameRenderer.react")
            ^
  18:     ...MarkdownUserNameRenderer_name
  
  Source: GraphQL request (25:3)
  24:   id
  25:   foo {
        ^
  26:     bar {
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: module-on-child-of-client-in-nested-fragment.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
extend type User {
  foo: Foo
}

type Foo {
  bar: Bar
}

type Bar {
  user: User
}


fragment NameRendererFragment on User {
  id
  foo {
    bar {
      user {
        ...SomeUser
      }
    }
  }
}

fragment SomeUser2 on User {
  nameRenderer {
    ...PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment SomeUser on User {
  ...SomeUser2
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

query Test {
  me {
    ...NameRendererFragment
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @module. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source: GraphQL request (29:7)
  28:     ...PlainUserNameRenderer_name
  29:       @module(name: "PlainUserNameRenderer.react")
            ^
  30:     ...MarkdownUserNameRenderer_name
  
  Source: GraphQL request (17:3)
  16:   id
  17:   foo {
        ^
  18:     bar {
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: module-on-child-of-client-in-query-with-nested-fragment.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

fragment SomeUser2 on User {
  nameRenderer {
    ...PlainUserNameRenderer_name
      @module(name: "PlainUserNameRenderer.react")
    ...MarkdownUserNameRenderer_name
      @module(name: "MarkdownUserNameRenderer.react")
  }
}

fragment SomeUser on User {
  ...SomeUser2
}

query TestQuery {
  me {
    ...NameRendererFragment
  }
}

fragment NameRendererFragment on User {
  id
  foo {
    bar {
      user {
        ...SomeUser
      }
    }
  }
}

extend type User {
  foo: Foo
}

type Foo {
  bar: Bar
}

type Bar {
  user: User
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @module. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source: GraphQL request (19:7)
  18:     ...PlainUserNameRenderer_name
  19:       @module(name: "PlainUserNameRenderer.react")
            ^
  20:     ...MarkdownUserNameRenderer_name
  
  Source: GraphQL request (37:3)
  36:   id
  37:   foo {
        ^
  38:     bar {
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: module-on-client-field-in-query.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query TestQuery {
  me {
    user {
      nameRenderer @match {
        ...PlainUserNameRenderer_name
          @module(name: "PlainUserNameRenderer.react")
        ...MarkdownUserNameRenderer_name
          @module(name: "MarkdownUserNameRenderer.react")
      }
    }
  }
}


extend type User {
  user: User
}

fragment PlainUserNameRenderer_name on PlainUserNameRenderer {
  plaintext
  data {
    text
  }
}

fragment MarkdownUserNameRenderer_name on MarkdownUserNameRenderer {
  markdown
  data {
    markup
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @module. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source: GraphQL request (7:11)
  6:         ...PlainUserNameRenderer_name
  7:           @module(name: "PlainUserNameRenderer.react")
               ^
  8:         ...MarkdownUserNameRenderer_name
  
  Source: GraphQL request (4:5)
  3:   me {
  4:     user {
         ^
  5:       nameRenderer @match {
  
`;

exports[`ValidateRelayServerOnlyDirectives matches expected output: stream-connection-on-client.invalid.graphql 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
# expected-to-throw
query NodeQuery(
  $id: ID!
) {
  node(id: $id) {
    id
    ... on Story {
      clientComments(first: 10)
      @stream_connection(
        key: "NodeQuery_clientComments"
        initial_count: 0
        label: "comments"
      ) {
        edges {
          node {
            actor {
              name
            }
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
  }
}

extend type Story {
  clientComments(first: Int, last: Int, orderby: String): CommentsConnection
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
THROWN EXCEPTION:

Error: Encountered 1 error(s):
- Unexpected directive: @stream. This directive can only be used on fields/fragments that are fetched from the server schema, but it is used inside a client-only selection.
  
  Source (derived): GraphQL request (9:7)
   8:       clientComments(first: 10)
   9:       @stream_connection(
            ^
  10:         key: "NodeQuery_clientComments"
  
  Source: GraphQL request (8:7)
  7:     ... on Story {
  8:       clientComments(first: 10)
           ^
  9:       @stream_connection(
  
`;
